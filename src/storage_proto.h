/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _STORAGE_PROTO_H_RPCGEN
#define _STORAGE_PROTO_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#include "rozo.h"

enum storage_status_t {
	STORAGE_SUCCESS = 0,
	STORAGE_FAILURE = 1,
};
typedef enum storage_status_t storage_status_t;

typedef char storage_uuid_t[ROZO_UUID_SIZE];

struct storage_status_response_t {
	storage_status_t status;
	union {
		int error;
	} storage_status_response_t_u;
};
typedef struct storage_status_response_t storage_status_response_t;

struct storage_remove_args_t {
	storage_uuid_t uuid;
	storage_uuid_t mf;
};
typedef struct storage_remove_args_t storage_remove_args_t;

struct storage_write_args_t {
	storage_uuid_t uuid;
	storage_uuid_t mf;
	uint8_t mp;
	uint64_t mb;
	uint32_t nmbs;
	struct {
		u_int bins_len;
		char *bins_val;
	} bins;
};
typedef struct storage_write_args_t storage_write_args_t;

struct storage_read_args_t {
	storage_uuid_t uuid;
	storage_uuid_t mf;
	uint8_t mp;
	uint64_t mb;
	uint32_t nmbs;
};
typedef struct storage_read_args_t storage_read_args_t;

struct storage_truncate_args_t {
	storage_uuid_t uuid;
	storage_uuid_t mf;
	uint8_t mp;
	uint64_t mb;
};
typedef struct storage_truncate_args_t storage_truncate_args_t;

struct storage_read_response_t {
	storage_status_t status;
	union {
		struct {
			u_int bins_len;
			char *bins_val;
		} bins;
		int error;
	} storage_read_response_t_u;
};
typedef struct storage_read_response_t storage_read_response_t;

struct storage_stat_t {
	uint32_t bsize;
	uint64_t bfree;
};
typedef struct storage_stat_t storage_stat_t;

struct storage_stat_response_t {
	storage_status_t status;
	union {
		storage_stat_t stat;
		int error;
	} storage_stat_response_t_u;
};
typedef struct storage_stat_response_t storage_stat_response_t;

#define STORAGE_PROGRAM 0x20000001
#define STORAGE_VERSION 1

#if defined(__STDC__) || defined(__cplusplus)
#define STORAGEPROC_NULL 0
extern  void * storageproc_null_1(void *, CLIENT *);
extern  void * storageproc_null_1_svc(void *, struct svc_req *);
#define STORAGEPROC_REMOVE 1
extern  storage_status_response_t * storageproc_remove_1(storage_remove_args_t *, CLIENT *);
extern  storage_status_response_t * storageproc_remove_1_svc(storage_remove_args_t *, struct svc_req *);
#define STORAGEPROC_WRITE 2
extern  storage_status_response_t * storageproc_write_1(storage_write_args_t *, CLIENT *);
extern  storage_status_response_t * storageproc_write_1_svc(storage_write_args_t *, struct svc_req *);
#define STORAGEPROC_READ 3
extern  storage_read_response_t * storageproc_read_1(storage_read_args_t *, CLIENT *);
extern  storage_read_response_t * storageproc_read_1_svc(storage_read_args_t *, struct svc_req *);
#define STORAGEPROC_TRUNCATE 4
extern  storage_status_response_t * storageproc_truncate_1(storage_truncate_args_t *, CLIENT *);
extern  storage_status_response_t * storageproc_truncate_1_svc(storage_truncate_args_t *, struct svc_req *);
#define STORAGEPROC_STAT 5
extern  storage_stat_response_t * storageproc_stat_1(char *, CLIENT *);
extern  storage_stat_response_t * storageproc_stat_1_svc(char *, struct svc_req *);
extern int storage_program_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define STORAGEPROC_NULL 0
extern  void * storageproc_null_1();
extern  void * storageproc_null_1_svc();
#define STORAGEPROC_REMOVE 1
extern  storage_status_response_t * storageproc_remove_1();
extern  storage_status_response_t * storageproc_remove_1_svc();
#define STORAGEPROC_WRITE 2
extern  storage_status_response_t * storageproc_write_1();
extern  storage_status_response_t * storageproc_write_1_svc();
#define STORAGEPROC_READ 3
extern  storage_read_response_t * storageproc_read_1();
extern  storage_read_response_t * storageproc_read_1_svc();
#define STORAGEPROC_TRUNCATE 4
extern  storage_status_response_t * storageproc_truncate_1();
extern  storage_status_response_t * storageproc_truncate_1_svc();
#define STORAGEPROC_STAT 5
extern  storage_stat_response_t * storageproc_stat_1();
extern  storage_stat_response_t * storageproc_stat_1_svc();
extern int storage_program_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_storage_status_t (XDR *, storage_status_t*);
extern  bool_t xdr_storage_uuid_t (XDR *, storage_uuid_t);
extern  bool_t xdr_storage_status_response_t (XDR *, storage_status_response_t*);
extern  bool_t xdr_storage_remove_args_t (XDR *, storage_remove_args_t*);
extern  bool_t xdr_storage_write_args_t (XDR *, storage_write_args_t*);
extern  bool_t xdr_storage_read_args_t (XDR *, storage_read_args_t*);
extern  bool_t xdr_storage_truncate_args_t (XDR *, storage_truncate_args_t*);
extern  bool_t xdr_storage_read_response_t (XDR *, storage_read_response_t*);
extern  bool_t xdr_storage_stat_t (XDR *, storage_stat_t*);
extern  bool_t xdr_storage_stat_response_t (XDR *, storage_stat_response_t*);

#else /* K&R C */
extern bool_t xdr_storage_status_t ();
extern bool_t xdr_storage_uuid_t ();
extern bool_t xdr_storage_status_response_t ();
extern bool_t xdr_storage_remove_args_t ();
extern bool_t xdr_storage_write_args_t ();
extern bool_t xdr_storage_read_args_t ();
extern bool_t xdr_storage_truncate_args_t ();
extern bool_t xdr_storage_read_response_t ();
extern bool_t xdr_storage_stat_t ();
extern bool_t xdr_storage_stat_response_t ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_STORAGE_PROTO_H_RPCGEN */
