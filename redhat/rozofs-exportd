#!/bin/sh
#
# rozofs-exportd       This shell script takes care of starting and stopping
#                      the exportd services.
#
#chkconfig: 35 20 80
#description: rozofs exportd server
#processname: exportd

### BEGIN INIT INFO
# Provides:          rozofs-exportd
# Required-Start:    $network $local_fs $remote_fs $portmap
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: RozoFS exportd server
# Description:       RozoFS is a scale-out NAS file system. This service
#                    provides the rozofs-exportd server functionality.
### END INIT INFO


DAEMON=/usr/bin/exportd
NAME=exportd
PIDFILE=/var/run/$NAME.pid

# Source function library.
if [ -f /lib/lsb/init-functions ]; then
	. /lib/lsb/init-functions
	alias START_DAEMON=start_daemon
    alias STATUS=exportd_status
    alias LOG_SUCCESS=log_success_msg
    alias LOG_FAILURE=log_failure_msg
    alias LOG_WARNING=log_warning_msg
elif [ -f /etc/init.d/functions ]; then
    . /etc/init.d/functions
    alias START_DAEMON=daemon
    alias STATUS=status
    alias LOG_SUCCESS=success
    alias LOG_FAILURE=failure
    alias LOG_WARNING=passed
else
    echo "Error: your platform is not supported by $0" > /dev/stderr
    exit 1
fi

exportd_status () {
    local status 

    status="0"
    pidofproc -p $PIDFILE $DAEMON >/dev/null || status="$?"
    if [ "$status" = 0 ]; then
        log_success_msg "$NAME is running"
        return 0
    elif [ "$status" = 4 ]; then
        log_failure_msg "could not access PID file for $NAME"
        return $status
    else
        log_success_msg "$NAME is not running"
        return $status
    fi
}


do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started

    START_DAEMON -p $PIDFILE $DAEMON

    return "$?"
}

# stop the daemon/service

do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred

    killproc -p $PIDFILE $DAEMON

    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2

    # remove pidfile if daemon could not delete on exit.
    rm -f $PIDFILE

    return "$RETVAL"
}



case "$1" in
    start)
        echo -n "Starting $NAME"
        
        do_start

        case "$?" in
            0|1) LOG_SUCCESS ;;
            *)   LOG_FAILURE ;;
        esac
        ;;
    stop)
        echo -n "Stopping $NAME"
        
        do_stop

        case "$?" in
            0|1) LOG_SUCCESS ;;
            2)   LOG_FAILURE ;;
        esac
        ;;
    status)
    	STATUS;;
    reload)
        echo -n "Reloading $NAME"
        killproc -p $PIDFILE $DAEMON -HUP
        case "$?" in
            0|1) LOG_SUCCESS ;;
            2)   LOG_FAILURE ;;
        esac
        ;;
    restart|force-reload)
        echo -n "Restarting $NAME"

        do_stop
        case "$?" in
            0|1)
                sleep 1
                do_start

                case "$?" in
                    0) LOG_SUCESS ;;
                    1) LOG_FAILURE ;; # Old process is still running
                    *) LOG_FAILURE ;; # Failed to start
                esac
                ;;
            *)
                # Failed to stop
                LOG_FAILURE
            ;;
        esac
        ;;
    *)

    LOG_WARNING "Usage: $0 {start|stop|reload|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
