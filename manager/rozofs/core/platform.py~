#-*- coding: utf-8 -*-

import os
import shutil
import socket
import xml.dom.minidom

from rozo.core.config import config_t, config_destroy, config_setting_t, config_value_t, config_write_file, CONFIG_TRUE, CONFIG_TYPE_GROUP, config_setting_add, CONFIG_TYPE_INT, config_setting_set_int, CONFIG_TYPE_LIST, CONFIG_TYPE_GROUP,CONFIG_TYPE_STRING, config_setting_set_string, config_lookup, config_setting_length
from rozo.core.exception import RozoAlreadyExistsError, InvalidLayoutError, RozoExportExistsError, RozoExportdExistsError, DuplicatedStorageError, DuplicatedStoragedError
from rozo.core.constants import LAYOUT_2_3_4, LAYOUT_4_8_12, LAYOUT_8_12_16, LAYOUT_VALUES, LAYOUT, VOLUME, VOLUME_CID, VOLUME_SIDS,  VOLUME_SID, VOLUME_HOST, EXPORTS, EXPORT_EID, EXPORT_ROOT, EXPORT_MD5, STORAGE_SID, STORAGE_ROOT, STORAGES

class Storage(object):
    def __init__(self, sid, path):
        self.sid = sid
        self.path = path

class Storaged(object):
    def __init__(self, host, storages = []):
        self.host = host
        self.storages = storages

class Cluster(object):
    def __init__(self, cid, storageds = []):
        self.cid = cid
        self.storageds = storageds

class Export(object):
    def __init__(self, eid, path, md5):
        self.eid = eid
        self.path = path
        self.md5 = md5

class Exportd(object):
    def __init__(self, host, exports = []):
        self.host = host
        self.exports = exports

__EXPORTS_DIR__ = '/srv/rozofs/exports'
__STORAGES_DIR__ = '/srv/rozofs/storages'

class Rozo(object):
    def __init__(self, name, layout, exportd, volume=[],
                 exports_dir=__EXPORTS_DIR__, storaged_dir=__STORAGES_DIR_):
        self._name = name
        self._layout = layout
        self._exportd = exportd
        self._volume = volume
        self.storage_dir=storage_dir
        self.exports_dir=exports_dir

__XML__ = "rozo.xml"
__NEW__ = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><platform></platform>"

class Platform(object):

    def __init__(self, filename):
        self._xmlfile = filename
        self._rozos = {}

    #
    # XML methods
    #    
    def _read_storage(self, storage_node):
        sid = int(storage_node.attributes['sid'].value)
        path = storage_node.attributes['path'].value
        return Storage(sid, path)
        
    def _read_storaged(self, storaged_node):
        host = storaged_node.attributes['host'].value
        storages = [self._read_storage(storage) 
            for storage in storaged_node.getElementsByTagName('storage')]
        return Storaged(host, storages)
    
    def _read_cluster(self, cluster_node):
        cid = int(cluster_node.attributes['cid'].value)
        storageds = [self._read_storaged(storaged) 
            for storaged in cluster_node.getElementsByTagName('storaged')]
        return Cluster(cid, storageds)
        
    def _read_volume(self, volume_node):
        return [self._read_cluster(cluster) 
            for cluster in volume_node.getElementsByTagName('cluster')]
    
    def _read_export(self, export_node):
        eid = int(export_node.attributes['eid'].value)
        path = export_node.attributes['path'].value
        md5 = export_node.attributes['md5'].value
        return Export(eid, path, md5)
    
    def _read_exportd(self, exportd_node):
        host = exportd_node.attributes['host'].value
        exports = [self._read_export(export) 
            for export in exportd_node.getElementsByTagName('export')]
        return Exportd(host, exports)
    
    def _read_rozo(self, rozo_node):
        name = rozo_node.attributes['name'].value
        layout = int(rozo_node.attributes['layout'].value)
        exports_dir = rozo_node.attributes['exports_dir'].value
        storages_dir = rozo_node.attributes['storages_dir'].value
        exportd = self._read_exportd(
            rozo_node.getElementsByTagName('exportd')[0])
        volume = self._read_volume(
            rozo_node.getElementsByTagName('volume')[0])
        return Rozo(name, layout, exportd, volume)
        
    def read(self):
        dom = xml.dom.minidom.parse(self._xmlfile)
        for rozo in dom.getElementsByTagName('rozo'):
            self._rozos[rozo.attributes['name'].value] = self._read_rozo(rozo)
        
    def _write_storage(self, storage):
        storage_node = xml.dom.minidom.Element('storage')
        storage_node.setAttribute('sid', str(storage.sid))
        storage_node.setAttribute('path', storage.path)
        return storage_node
        
    def _write_storaged(self, storaged):
        storaged_node = xml.dom.minidom.Element('storaged')
        storaged_node.setAttribute('host', storaged.host)
        for storage in storaged.storages:
            storaged_node.appendChild(self._write_storage(storage))
        return storaged_node
    
    def _write_cluster(self, cluster):
        cluster_node = xml.dom.minidom.Element('cluster')
        cluster_node.setAttribute('cid', str(cluster.cid))
        for storaged in cluster.storageds:
            cluster_node.appendChild(self._write_storaged(storaged))
        return cluster_node
        
    def _write_volume(self, volume):
        volume_node = xml.dom.minidom.Element('volume')
        for cluster in volume:
            volume_node.appendChild(self._write_cluster(cluster))
        return volume_node
    
    def _write_export(self, export):
        export_node = xml.dom.minidom.Element('export')
        export_node.setAttribute('eid', str(export.eid))
        export_node.setAttribute('path', export.path)
        export_node.setAttribute('md5', export.md5)
        return export_node
    
    def _write_exportd(self, exportd):
        exportd_node = xml.dom.minidom.Element('exportd')
        exportd_node.setAttribute('host', exportd.host)
        for export in exportd.exports:
            exportd_node.appendChild(self._write_export(export))
        return exportd_node
    
    def _write_rozo(self, rozo):
        rozo_node = xml.dom.minidom.Element('rozo')
        rozo_node.setAttribute('name',  rozo.name)
        rozo_node.setAttribute('layout', str(rozo.layout))
        rozo_node.setAttribute('storages_dir', rozo.storages_dir)
        rozo_node.setAttribute('exports_dir', rozo.exports_dir)
        rozo_node.appendChild(self._write_exportd(rozo.exportd))
        rozo_node.appendChild(self._write_volume(rozo.volume))
        return rozo_node

    def write(self):
        dom = xml.dom.minidom.parseString(__NEW__)
        platform_node = dom.getElementsByTagName('platform')[0]
        for rozo in self._rozos.values():
            platform_node.appendChild(self._write_rozo(rozo))
        with open(self._xmlfile, 'w') as f :
            dom.writexml(f, indent='', addindent='\t', newl='\n')

class PlatformManager(Platform):

    def __init__(self, filename):
        Platform.__init__(self, filename)

    def list_rozos(self):
        return self._rozos.keys()
    
    def add_rozo(self, rozo):
        if self._rozos.has_key(rozo.name):
            raise RozoAlreadyExistsError(rozo.name)
        if rozo.layout not in [LAYOUT_2_3_4, LAYOUT_4_8_12, LAYOUT_8_12_16]:
            raise InvalidLayoutError(rozo.layout)
        for r in self._rozos.values():
            if r.exportd.host == rozo.exportd.host:
                raise RozoExportdExistsError(rozo.exportd.host)
        self._rozos[rozo.name] = rozo
    
    def remove_rozo(self, name):
        del self._rozos[name]

    def list_exports(self, rozo_name):
        return [e.path for e in rozo.exportd.exports]
    
    def add_export(self, rozo_name, export):
        rozo = self._rozos[rozo_name]
        if not os.path.isabs(export.path):
            raise NotAbsolutePathError(export.path)
        for e in rozo.exportd.exports:
            if e.path == export.path:
                raise RozoExportExistsError(export)
        # compute eid
        # to be sure to avoid conflict use a unique eid across platform
        # for now just get the max
        export.eid = max([e.eid for r in self._rozos.values() 
            for e in r.exportd.exports]) + 1
        rozo.exportd.exports.append(export)

    # warning this will not remove data on the storage nodes
    # neither metada on export server
    def remove_export(self, rozo_name, path):
        for export in self._rozos[rozo_name].exportd.exports:
            if export.path == path:
                self._rozos[rozo_name].exportd.exports.remove(export)
        
    def add_cluster(self, rozo_name, cluster):
        rozo = self._rozos[rozo_name]
        max_cid = max([c.cid for r in self._rozos.values() 
            for c in r.volume]) + 1
        max_sid = max([s.sid for r in self._rozos.values() for c in r.volume 
            for sd in c.storageds for s in sd.storages]) + 1
        # layout consistency check
        count = len([s.path for sd in cluster.storageds for s in sd.storages])
        if count < LAYOUT_VALUES[rozo.layout][2]:
            raise InconsitentClusterSizeError('%s over %s', 
                (count, LAYOUT_VALUES[rozo.layout][2]))
        # storaged consistency check
        d = [sd.host for sd in cluster.storageds]
        h = [item for item in set(item for item in d) if d.count(item) != 1]
        if len(h) != 0:
            raise DuplicatedStoragedError(h)
        # storage path check
        for path in [s.path for sd in cluster.storageds for s in sd.storages]:
            if not os.path.isabs(path):
                raise NotAbsolutePathError(path)
        # for each storaged be sure to not have duplicated underlying storage
        # find all tuple (host, path)
        d = [(sd.host, s.path) for r in self._rozos.values() 
            for c in r.volume for sd in c.storageds 
                for s in sd.storages] + [(sd.host, s.path) 
                for sd in cluster.storageds for s in sd.storages]
        #keep only tuple that appears more than once
        h = [item for item in set(item for item in d) if d.count(item) != 1]
        if len(h) != 0:
            raise DuplicatedStorageError(h)
        # now add the cluster with the right cid and sids
        cluster.cid = max_cid
        for storage in [s for sd in cluster.storageds for s in sd.storages]:
            storage.sid = max_sid
            max_sid += 1
        rozo.volume.append(cluster)


class PlatformConfigurator(Platform):
    
    def __init__(filename, exportd_confile='/etc/rozo/export.conf'
                 storaged_confile='/etc/rozo/storage.conf', ):
        Platform.__init__(self, filename)
        self._export_confile=exportd_confile
        self._storaged_confile=storaged_confile
        # find our hostname
        self._hostname = socket.gethostname()
        self.read()

    def _read_exportd_config(self):
        pass

    def _write_exportd_config(self, rozo) 
        
    def _configure_exportd(self):
        # we only configure the first exportd found (according to hostname)
        # if PaltformManager did the job we can't have several exportd for this host 
        rozos =  [r for r in self._rozos.values()
                  if r.exportd.host = self._hostname]
        if len(rozos) == 0: 
            return #nothing to do
        else:
            rozo = rozos[0]
            # create config file
            config = config_t()
            config.root = config_setting_t()
            config.root.type = CONFIG_TYPE_GROUP
            config.root.value = config_value_t()
        
            layout_setting = config_setting_add(config.root, LAYOUT, CONFIG_TYPE_INT)
            config_setting_set_int(layout_setting, rozo.layout)
        
            volume_settings = config_setting_add(config.root, VOLUME, CONFIG_TYPE_LIST) 
            for cluster in rozo.volume:
                cluster_setting = config_setting_add(volume_settings, '', CONFIG_TYPE_GROUP)
                cid_setting = config_setting_add(cluster_setting, VOLUME_CID, CONFIG_TYPE_INT)
                config_setting_set_int(cid_setting, cluster.cid)
                sids_setting = config_setting_add(cluster_setting, VOLUME_SIDS, CONFIG_TYPE_LIST)
                for storaged in cluster.storageds:
                    for storage in storaged.storages:
                        storage_setting = config_setting_add(sids_setting, '', CONFIG_TYPE_GROUP)
                        sid_setting = config_setting_add(storage_setting, VOLUME_SID, CONFIG_TYPE_INT)
                        config_setting_set_int(sid_setting, storage.sid)
                        host_setting = config_setting_add(storage_setting, VOLUME_HOST, CONFIG_TYPE_STRING)
                        config_setting_set_string(host_setting, storaged.host.encode('ascii','ignore'))
        
            export_settings = config_setting_add(config.root, EXPORTS, CONFIG_TYPE_LIST) 
            for export in rozo.exportd.exports:
                export_setting = config_setting_add(export_settings, '', CONFIG_TYPE_GROUP)
                eid_setting = config_setting_add(export_setting, EXPORT_EID, CONFIG_TYPE_INT)
                config_setting_set_int(eid_setting, export.eid)
                root_setting = config_setting_add(export_setting, EXPORT_ROOT, CONFIG_TYPE_STRING)
                config_setting_set_string(root_setting, export.path.encode('ascii','ignore'))
                root_setting = config_setting_add(export_setting, EXPORT_MD5, CONFIG_TYPE_STRING)
                config_setting_set_string(root_setting, export.md5.encode('ascii','ignore'))
        
            filename = os.path.join(base_dir, rozo.exportd.host, config_file)
            if not os.path.exists(os.path.dirname(filename)):
                os.makedirs(os.path.dirname(filename))
            
            if (config_write_file(config, filename.encode('ascii','ignore')) != CONFIG_TRUE):
                error_text = config.error_text
                config_destroy(config)
                raise ConfigurationError(error_text)
        
            config_destroy(config)
            
            # manage export directories
            for export in rozo.exportd.exports:
                path = os.path.join(base_dir, rozo.exportd.host, export.path[1:])
                if not os.path.exists(path):
                    os.makedirs(path)

    def _configure_storageds(self, base_dir, config_file):
        # find all storageds of all rozo and merge config
        # assuming storaged and rozo layout are consistent (from add cluster)
        sdrs = {}
        for sdr in [(sd, r.layout) for r in self._rozos.values() for c in r.volume for sd in c.storageds]:
            if not sdrs.has_key(sdr[0].host):
                sdrs[sdr[0].host] = sdr
            else:
                sdrs[sdr[0].host].storages += sdr[0].storages
                
        for sdr in sdrs.values():
            # create config file
            config = config_t()
            config.root = config_setting_t()
            config.root.type = CONFIG_TYPE_GROUP
            config.root.value = config_value_t()
            
            layout_setting = config_setting_add(config.root, LAYOUT, CONFIG_TYPE_INT)
            config_setting_set_int(layout_setting, sdr[1])

            storage_settings = config_setting_add(config.root, STORAGES, CONFIG_TYPE_LIST) 
            for storage in sdr[0].storages:
                storage_setting = config_setting_add(storage_settings, '', 
                        CONFIG_TYPE_GROUP)
                sid_setting = config_setting_add(storage_setting, 
				    STORAGE_SID, CONFIG_TYPE_INT)
                config_setting_set_int(sid_setting, storage.sid)
                root_setting = config_setting_add(storage_setting, 
				    STORAGE_ROOT, CONFIG_TYPE_STRING)
                config_setting_set_string(root_setting, 
				    storage.path.encode('ascii','ignore'))
		    
            filename = os.path.join(base_dir, sdr[0].host, config_file)
            if not os.path.exists(os.path.dirname(filename)):
                os.makedirs(os.path.dirname(filename))
            
            if (config_write_file(config, filename.encode('ascii','ignore')) != CONFIG_TRUE):
                error_text = config.error_text
                config_destroy(config)
                raise ConfigurationError(error_text)
        
            config_destroy(config)
            
            #manage directories
            for storage in sdr[0].storages:
                path = os.path.join(base_dir, sdr[0].host, storage.path[1:])
                if not os.path.exists(path):
                    os.makedirs(path)
                
    def configure(self):
        cfgdir = os.path.join(self._directory, 'config')
        if (os.path.exists(cfgdir)):
            shutil.rmtree(cfgdir)
        self._configure_exportds(cfgdir, 'etc/rozo/export.conf')
        self._configure_storageds(cfgdir, 'etc/rozo/storage.conf')
        
    #
    # Synchronisation methods
    #
